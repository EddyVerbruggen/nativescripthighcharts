"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var fs = require("tns-core-modules/file-system");
var ItemsComponent = (function () {
    function ItemsComponent() {
        this.graphUrl1 = null;
        this.graphUrl2 = null;
    }
    ItemsComponent.prototype.ngOnInit = function () {
        this.renderGraph1();
        this.renderGraph2();
    };
    ItemsComponent.prototype.renderGraph1 = function () {
        var data = {
            xAxisCategories: ['6:00', '7:00', '8:00', '9:00', '10:00', '11:00', '12:00', '13:00', '14:00', '15:00', '16:00', '17:00', '18:00', '19:00', '20:00', '21:00', '22:00'],
            columnSeriesData: [0, 0, 0, 1, 2, 4, 8, 7, 7, 7, 3, 1, 1, 0, 1, 0, 0],
            lineSeriesData: [null, null, 0, 1, 2, 4, 8, 7, 7, 7, 3, 1, 1, 0, 1, 0, null]
        };
        // Note that when https://github.com/NativeScript/NativeScript/issues/4443 is fixed you can use a relative url (without the 'fs' module)
        this.graphUrl1 = encodeURI(fs.knownFolders.currentApp().path + "/item/graph/graph.html?" + JSON.stringify(data));
    };
    ItemsComponent.prototype.renderGraph2 = function () {
        var data = {
            xAxisCategories: ['6:00', '8:00', '10:00', '12:00', '14:00', '16:00', '18:00', '20:00', '22:00', '24:00'],
            columnSeriesData: [2, 10, 20, 30, 30, 23, 13, 4, -8, 10]
        };
        this.graphUrl2 = encodeURI(fs.knownFolders.currentApp().path + "/item/graph/graph.html?" + JSON.stringify(data));
    };
    return ItemsComponent;
}());
ItemsComponent = __decorate([
    core_1.Component({
        selector: "ns-items",
        moduleId: module.id,
        templateUrl: "./items.component.html",
    })
], ItemsComponent);
exports.ItemsComponent = ItemsComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXRlbXMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaXRlbXMuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0NBQWtEO0FBQ2xELGlEQUFtRDtBQU9uRCxJQUFhLGNBQWM7SUFMM0I7UUFNRSxjQUFTLEdBQVcsSUFBSSxDQUFDO1FBQ3pCLGNBQVMsR0FBVyxJQUFJLENBQUM7SUF3QjNCLENBQUM7SUF0QkMsaUNBQVEsR0FBUjtRQUNFLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUNwQixJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUVPLHFDQUFZLEdBQXBCO1FBQ0UsSUFBTSxJQUFJLEdBQUc7WUFDWCxlQUFlLEVBQUUsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDO1lBQ3RLLGdCQUFnQixFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNyRSxjQUFjLEVBQUUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDO1NBQzdFLENBQUM7UUFDRix3SUFBd0k7UUFDeEksSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUksRUFBRSxDQUFDLFlBQVksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxJQUFJLCtCQUEwQixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBRyxDQUFDLENBQUM7SUFDbkgsQ0FBQztJQUVPLHFDQUFZLEdBQXBCO1FBQ0UsSUFBTSxJQUFJLEdBQUc7WUFDWCxlQUFlLEVBQUUsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUM7WUFDekcsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQztTQUN6RCxDQUFDO1FBQ0YsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUksRUFBRSxDQUFDLFlBQVksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxJQUFJLCtCQUEwQixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBRyxDQUFDLENBQUM7SUFDbkgsQ0FBQztJQUNILHFCQUFDO0FBQUQsQ0FBQyxBQTFCRCxJQTBCQztBQTFCWSxjQUFjO0lBTDFCLGdCQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsVUFBVTtRQUNwQixRQUFRLEVBQUUsTUFBTSxDQUFDLEVBQUU7UUFDbkIsV0FBVyxFQUFFLHdCQUF3QjtLQUN0QyxDQUFDO0dBQ1csY0FBYyxDQTBCMUI7QUExQlksd0NBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgKiBhcyBmcyBmcm9tIFwidG5zLWNvcmUtbW9kdWxlcy9maWxlLXN5c3RlbVwiO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6IFwibnMtaXRlbXNcIixcbiAgbW9kdWxlSWQ6IG1vZHVsZS5pZCxcbiAgdGVtcGxhdGVVcmw6IFwiLi9pdGVtcy5jb21wb25lbnQuaHRtbFwiLFxufSlcbmV4cG9ydCBjbGFzcyBJdGVtc0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIGdyYXBoVXJsMTogc3RyaW5nID0gbnVsbDtcbiAgZ3JhcGhVcmwyOiBzdHJpbmcgPSBudWxsO1xuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIHRoaXMucmVuZGVyR3JhcGgxKCk7XG4gICAgdGhpcy5yZW5kZXJHcmFwaDIoKTtcbiAgfVxuXG4gIHByaXZhdGUgcmVuZGVyR3JhcGgxKCk6IHZvaWQge1xuICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICB4QXhpc0NhdGVnb3JpZXM6IFsnNjowMCcsICc3OjAwJywgJzg6MDAnLCAnOTowMCcsICcxMDowMCcsICcxMTowMCcsICcxMjowMCcsICcxMzowMCcsICcxNDowMCcsICcxNTowMCcsICcxNjowMCcsICcxNzowMCcsICcxODowMCcsICcxOTowMCcsICcyMDowMCcsICcyMTowMCcsICcyMjowMCddLFxuICAgICAgY29sdW1uU2VyaWVzRGF0YTogWzAsIDAsIDAsIDEsIDIsIDQsIDgsIDcsIDcsIDcsIDMsIDEsIDEsIDAsIDEsIDAsIDBdLFxuICAgICAgbGluZVNlcmllc0RhdGE6IFtudWxsLCBudWxsLCAwLCAxLCAyLCA0LCA4LCA3LCA3LCA3LCAzLCAxLCAxLCAwLCAxLCAwLCBudWxsXVxuICAgIH07XG4gICAgLy8gTm90ZSB0aGF0IHdoZW4gaHR0cHM6Ly9naXRodWIuY29tL05hdGl2ZVNjcmlwdC9OYXRpdmVTY3JpcHQvaXNzdWVzLzQ0NDMgaXMgZml4ZWQgeW91IGNhbiB1c2UgYSByZWxhdGl2ZSB1cmwgKHdpdGhvdXQgdGhlICdmcycgbW9kdWxlKVxuICAgIHRoaXMuZ3JhcGhVcmwxID0gZW5jb2RlVVJJKGAke2ZzLmtub3duRm9sZGVycy5jdXJyZW50QXBwKCkucGF0aH0vaXRlbS9ncmFwaC9ncmFwaC5odG1sPyR7SlNPTi5zdHJpbmdpZnkoZGF0YSl9YCk7XG4gIH1cblxuICBwcml2YXRlIHJlbmRlckdyYXBoMigpOiB2b2lkIHtcbiAgICBjb25zdCBkYXRhID0ge1xuICAgICAgeEF4aXNDYXRlZ29yaWVzOiBbJzY6MDAnLCAnODowMCcsICcxMDowMCcsICcxMjowMCcsICcxNDowMCcsICcxNjowMCcsICcxODowMCcsICcyMDowMCcsICcyMjowMCcsICcyNDowMCddLFxuICAgICAgY29sdW1uU2VyaWVzRGF0YTogWzIsIDEwLCAyMCwgMzAsIDMwLCAyMywgMTMsIDQsIC04LCAxMF1cbiAgICB9O1xuICAgIHRoaXMuZ3JhcGhVcmwyID0gZW5jb2RlVVJJKGAke2ZzLmtub3duRm9sZGVycy5jdXJyZW50QXBwKCkucGF0aH0vaXRlbS9ncmFwaC9ncmFwaC5odG1sPyR7SlNPTi5zdHJpbmdpZnkoZGF0YSl9YCk7XG4gIH1cbn0iXX0=